using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Windows.Forms;
using Microsoft.Win32;
using WireSockUI.Extensions;
using WireSockUI.Forms;
using WireSockUI.Properties;

namespace WireSockUI
{
    internal static class Program
    {
        [STAThread]
        private static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            if (!Directory.Exists(Global.MainFolder)) Directory.CreateDirectory(Global.MainFolder);
            if (!Directory.Exists(Global.ConfigsFolder)) Directory.CreateDirectory(Global.ConfigsFolder);

            if (!IsWireSockInstalled())
            {
                MessageBox.Show(Resources.AppNoWireSockMessage, Resources.AppNoWireSockTitle, MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
                OpenBrowser(Resources.AppWireSockURL);

                Environment.Exit(1);
            }

            CheckVersion();

            // Check registry overrides keys and create if null
            // HKLM\SOFTWARE\WireSockUI\WireSockUI
            RegistryKey key = Registry.LocalMachine.OpenSubKey(Global.RegistryKey);
            if (key == null)
            {
                if (Global.IsCurrentProcessElevated())
                {
                    try
                    {
                        // Create the key
                        RegistryKey rkey = Registry.LocalMachine.CreateSubKey(Global.RegistryKey);

                        // Create default settings.
                        // 0x0 = OFF, 0x1 = ON, 0x2 = IGNORED
                        // The below registry values can be used to override the user settings.
                        // This will allow greater control by administrators in an enterprise setting.
                        // By design, these are not editable in the application itself
                        rkey.SetValue("LimitNonAdmins", 0x1, RegistryValueKind.DWord);  // Will disable the "edit", "delete", and open profile location buttons when run as a non-admin
                        rkey.SetValue("AutoConnect", 0x2, RegistryValueKind.DWord);     
                        rkey.SetValue("AutoRun", 0x2, RegistryValueKind.DWord);         
                        rkey.SetValue("AutoMinimize", 0x2, RegistryValueKind.DWord);    
                        rkey.SetValue("AutoUpdate", 0x0, RegistryValueKind.DWord);      // AutoUpdate Disabled by default.
                        rkey.SetValue("LogLevel", 0x2, RegistryValueKind.DWord);        
                        rkey.SetValue("UseAdapter", 0x2, RegistryValueKind.DWord);      
                        rkey.Close();

                    }
                    catch
                    {
                        // Could not create the key or values
                        MessageBox.Show("Error setting up the environment!");
                        Environment.Exit(1);
                    }
                }
                else
                {
                    key.Close();
                    MessageBox.Show("The application needs to be run as an Administrator at least once to finish setting up the environment. \nPlease relaunch the application as an Administrator. \nThe application will now close.");
                    Environment.Exit(1);
                }
                
            }

            // Get registry overrides and load into Globals...
            // TODO: Add Try Catch here on loading registry values?
            key = Registry.LocalMachine.OpenSubKey(Global.RegistryKey);
            Global.LimitNonAdmins = (int)key.GetValue("LimitNonAdmins");
            Global.AutoConnect = (int)key.GetValue("AutoConnect");
            Global.AutoRun = (int)key.GetValue("AutoRun");
            Global.AutoMinimize = (int)key.GetValue("AutoMinimize");
            Global.AutoUpdate = (int)key.GetValue("AutoUpdate");
            Global.LogLevel = (int)key.GetValue("LogLevel");
            Global.UseAdapter = (int)key.GetValue("UseAdapter");
            key.Close();


            Application.Run(new FrmMain());
        }

        private static void OpenBrowser(string url)
        {
            try
            {
                Process.Start(url);
            }
            catch
            {
            }
        }

        /// <summary>
        ///     Determine if this WireSockUI was generated by an automated build from a GitHub repository
        /// </summary>
        /// <returns>Assembly repository if set during build</returns>
        private static string GetRepository()
        {
            var assembly = Assembly.GetExecutingAssembly();

            foreach (var metadata in assembly.GetCustomAttributes<AssemblyMetadataAttribute>())
                if (string.Equals(metadata.Key, "Repository"))
                    return metadata.Value;

            return null;
        }

        /// <summary>
        ///     Compare the local product version against the latest GitHub repository release tag
        /// </summary>
        /// <remarks>If auto update is enabled, repository is known and there is a new version, open up a browser window.</remarks>
        private static void CheckVersion()
        {
            if (!Settings.Default.AutoUpdate) return;

            try
            {
                var repository = GetRepository();

                if (!string.IsNullOrWhiteSpace(repository))
                {
                    var currentVersion = new Version(Application.ProductVersion);
                    var latestVersion = GitHubExtensions.GetLatestRelease(repository);

                    if (currentVersion != null && latestVersion != null && latestVersion > currentVersion)
                    {
                        MessageBox.Show(Resources.AppUpdateMessage, Resources.AppUpdateTitle, MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                        OpenBrowser($"https://github.com/{repository}/releases");
                    }
                }
            }
            catch
            {
            }
        }

        /// <summary>
        ///     Determine if the WireSock library components are installed.
        /// </summary>
        /// <returns><c>true</c> if installed, otherwise <c>false</c></returns>
        private static bool IsWireSockInstalled()
        {
            using (var key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\NTKernelResources\\WinpkFilterForVPNClient"))
            {
                if (key == null) return false;
                var wiresockLocation = key.GetValue("InstallLocation") + "bin\\wiresock-client.exe";

                // Add the directory containing the wgbooster.dll to the system's path if it is not added
                var installPath = key.GetValue("InstallLocation").ToString();
                var binPath = Path.Combine(installPath, "bin");

                var environmentPath = Environment.GetEnvironmentVariable("PATH");

                if (environmentPath == null || environmentPath.Contains(binPath))
                    return File.Exists(wiresockLocation);

                environmentPath = $"{binPath};{environmentPath}";
                Environment.SetEnvironmentVariable("PATH", environmentPath);

                return File.Exists(wiresockLocation);
            }
        }
    }
}